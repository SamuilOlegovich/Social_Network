server.port=8081

# путь к базе и прочие настройки к ней
spring.datasource.url=jdbc:postgresql://localhost:5432/socialnetwork
spring.datasource.username=postgres
spring.datasource.password=123
# говорим спрингу - чтобы генерировал базу данных на лету
spring.jpa.generate-ddl=true

# чтобы не ругался постгресс что ему там чего-то не хватает (уберет лишние ошибки из лога)
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# для секретных ключей которые получим у гугла при авторизации (создать и заполнить)
security.oauth2.client.clientId=1071348215784-dmdcmaf8h1pa9pvn7fan6c13b101jqpa.apps.googleusercontent.com
security.oauth2.client.clientSecret=3XLczHdI0j0fLjsOArPmKdpq
# указываем что авторизация будет происходить через форму
security.oauth2.client.clientAuthenticationScheme=form
# данные которые мы будем запрашивать у гугла для авторизации пользоватаеля
security.oauth2.client.scope=openid,email,profile
security.oauth2.client.accessTokenUri=https://www.googleapis.com/oauth2/v4/token
security.oauth2.client.userAuthorizationUri=https://accounts.google.com/o/oauth2/v2/auth
security.oauth2.resource.userInfoUri=https://www.googleapis.com/oauth2/v3/userinfo
security.oauth2.resource.preferTokenInfo=true
#
spring.main.allow-bean-definition-overriding=true
